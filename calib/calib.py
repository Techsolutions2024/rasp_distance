import cv2
import numpy as np
import glob
import os

# K√≠ch th∆∞·ªõc checkerboard: s·ªë ƒëi·ªÉm g√≥c b√™n trong
CHECKERBOARD = (7, 6)

# K√≠ch th∆∞·ªõc √¥ (mm ho·∫∑c cm, t√πy b·∫°n ƒëo th·ª±c t·∫ø), v√≠ d·ª•: m·ªói √¥ l√† 25mm
square_size = 25.0

# ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh checkerboard
image_dir = "calib_images"
images = glob.glob(os.path.join(image_dir, "*.jpg"))

# Danh s√°ch ƒë·ªÉ l∆∞u ƒëi·ªÉm 3D v√† 2D
objpoints = []  # ƒêi·ªÉm 3D th·ª±c t·∫ø (tr√™n m·∫∑t ph·∫≥ng checkerboard)
imgpoints = []  # ƒêi·ªÉm 2D ph√°t hi·ªán tr√™n ·∫£nh

# T·∫°o m·∫£ng ƒëi·ªÉm object (gi·∫£ s·ª≠ z=0)
objp = np.zeros((CHECKERBOARD[0] * CHECKERBOARD[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)
objp *= square_size  # Nh√¢n v·ªõi k√≠ch th∆∞·ªõc √¥ th·ª±c t·∫ø

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, None)

    if ret:
        objpoints.append(objp)
        corners2 = cv2.cornerSubPix(
            gray, corners, (11, 11), (-1, -1),
            criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
        )
        imgpoints.append(corners2)

        # V·∫Ω g√≥c v√† hi·ªÉn th·ªã
        cv2.drawChessboardCorners(img, CHECKERBOARD, corners2, ret)
        cv2.imshow("Detected", img)
        cv2.waitKey(100)

cv2.destroyAllWindows()

# L·∫•y k√≠ch th∆∞·ªõc ·∫£nh cu·ªëi c√πng
h, w = gray.shape[:2]

# Hi·ªáu ch·ªânh camera
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(
    objpoints, imgpoints, (w, h), None, None
)

# In k·∫øt qu·∫£
print("\nüéØ Calibration Results:")
print("Camera matrix:\n", mtx)
print("Distortion coefficients:\n", dist.ravel())

# L∆∞u ra file
np.savez("camera_calib.npz", camera_matrix=mtx, dist_coeffs=dist)
print("‚úÖ ƒê√£ l∆∞u file: camera_calib.npz")
